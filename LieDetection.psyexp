<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1680, 1050]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="LieDetection" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="Tobii Technology" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="ANQN0-I0J00-G4HJK-M8P1F-1S1Y7-3G5BU-CDRW" valType="str"/>
    <Param name="tbModel" updates="None" val="Tobii Pro Nano" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="TPNA1-030241945524" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="Start">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.08" valType="num"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Welcome!&amp;#10;&amp;#10;This is an experiment about lie detection.&amp;#10;&amp;#10;Press 'space' to continue" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="eye_tracking_code">
        <Param name="Before Experiment" updates="constant" val="import tobii_research as tr&amp;#10;&amp;#10;from datetime import datetime as dt&amp;#10;import xlsxwriter as xl&amp;#10;&amp;#10;&amp;#10;#uniform timestamp for document name&amp;#10;time_stamp = dt.utcnow()&amp;#10;exp_time = str(time_stamp)[0:10] + '_' + str(time_stamp)[11:13] + str(time_stamp)[14:16]&amp;#10;&amp;#10;# finding the eyetracker&amp;#10;eye_tracker = tr.find_all_eyetrackers()[0]&amp;#10;&amp;#10;global_gaze_data = None&amp;#10;bs_diameter = 0&amp;#10;&amp;#10;def gaze_data_callback(gaze_data):&amp;#10;    global global_gaze_data&amp;#10;    global_gaze_data = gaze_data&amp;#10;    print(global_gaze_data.right_eye.EyeData.pupil.diameter)&amp;#10;    &amp;#10;# start eyetracking &amp;#10;eye_tracker.subscribe_to(tr.EYETRACKER_GAZE_DATA, gaze_data_callback, as_dictionary=True)&amp;#10;&amp;#10;# list for storing data &amp;#10;eye_measures = []&amp;#10;#time_stamps = []&amp;#10;&amp;#10;option = ''&amp;#10;mode = ''" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="user = expInfo['participant']&amp;#10;&amp;#10;#True = number, False = questions&amp;#10;reihenfolge = True" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="user = expInfo[&quot;participant&quot;];&amp;#10;reihenfolge = true;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="eye_tracking_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="#True = number, False = questions&amp;#10;reihenfolge = False&amp;#10;&amp;#10;text_clock = core.Clock()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="reihenfolge = false;&amp;#10;text_clock = new core.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Baseline">
      <TextComponent name="fixation_cross">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="fixation_cross" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <CodeComponent name="eye_tracking_code2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# eyetracking, append baseline measures with new pupil diameter&amp;#10;if(global_gaze_data != None):&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    eye_measures.append(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    #time_stamps.append(dt.utcnow())&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    baseline_s.append('b')&amp;#10;    key_s.append('')&amp;#10;    id_s.append('')&amp;#10;    correct_s.append('')" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((global_gaze_data !== null)) {&amp;#10;    eye_measures.push(global_gaze_data.get(&quot;left_pupil_diameter&quot;));&amp;#10;    baseline_s.push(&quot;b&quot;);&amp;#10;    key_s.push(&quot;&quot;);&amp;#10;    id_s.push(&quot;&quot;);&amp;#10;    correct_s.push(&quot;&quot;);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="eye_tracking_code2" valType="code"/>
      </CodeComponent>
      <CodeComponent name="timer_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="loopClock = new core.Clock();&amp;#10;routine_time = util.randint(2, 5);&amp;#10;loopClock.add(routine_time);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# timer to randomise time of routine&amp;#10;loopClock = core.Clock()&amp;#10;routine_time = randint(2,5)&amp;#10;loopClock.add(routine_time)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# check if timer is over&amp;#10;if (loopClock.getTime() &gt;0):&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((loopClock.getTime() &gt; 0)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="loopClock.reset();&amp;#10;psychoJS.experiment.addData(&quot;basline.time&quot;, routine_time);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# reset Clock&amp;#10;loopClock.reset()&amp;#10;thisExp.addData('basline.time', routine_time)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="timer_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="NumberTest">
      <TextComponent name="question_1">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="question_1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Is the displayed number greater than 10?" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="press_key_r">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="press_key_r" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="                    Yes &quot;→&quot; " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="press_key_l">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="RTL" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="press_key_l" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(-0.12, -0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="&quot;←&quot; No" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="num_test">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="num_test" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <CodeComponent name="number_genertion">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import random " valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as random from 'random';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="corResp = &quot;&quot;;&amp;#10;press_key_l.height = 0.05;&amp;#10;press_key_l.pos = [(- 0.12), (- 0.3)];&amp;#10;press_key_r.height = 0.05;&amp;#10;press_key_r.pos = [0, (- 0.3)];&amp;#10;ind = 0;&amp;#10;if (reihenfolge) {&amp;#10;    ind = trials_num.thisN;&amp;#10;} else {&amp;#10;    ind = trials_num2.thisN;&amp;#10;}&amp;#10;num = numbers_rand[ind];&amp;#10;thisExp.addData(&quot;num_test.value&quot;, num);&amp;#10;if ((num &gt; 10)) {&amp;#10;    corResp = &quot;right&quot;;&amp;#10;} else {&amp;#10;    corResp = &quot;left&quot;;&amp;#10;}&amp;#10;num_test.text = num.toString();&amp;#10;timer_set = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="corResp = ''&amp;#10;press_key_l.height = 0.05&amp;#10;press_key_l.pos = (-0.12, -0.3)&amp;#10;press_key_r.height = 0.05&amp;#10;press_key_r.pos = (0, -0.3)&amp;#10;&amp;#10;# select number from list generated in the introduction&amp;#10;ind = 0&amp;#10;if reihenfolge:&amp;#10;    ind = trials_num.thisN&amp;#10;else: &amp;#10;    ind = trials_num2.thisN&amp;#10;num = numbers_rand[ind]&amp;#10;   &amp;#10;# write generated number to data&amp;#10;thisExp.addData('num_test.value', num)&amp;#10;&amp;#10;# generate correct response (always truth)&amp;#10;if num &gt; 10:&amp;#10;    corResp = 'right'&amp;#10;else:&amp;#10;    corResp = 'left'&amp;#10;&amp;#10;num_test.text = str(num)&amp;#10;&amp;#10;# set arrow timer&amp;#10;timer_set = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if arrow_response.keys and not timer_set:&amp;#10;    # right key&amp;#10;    if 'right' in arrow_response.keys:&amp;#10;        press_key_r.height = 0.08&amp;#10;        press_key_r.pos = (0, -0.29)&amp;#10;    # left key&amp;#10;    if 'left' in arrow_response.keys:&amp;#10;        press_key_l.height = 0.08&amp;#10;        press_key_l.pos = (-0.12, -0.29)&amp;#10;    # set timer&amp;#10;    text_clock = core.Clock()&amp;#10;    text_clock.add(1)&amp;#10;    timer_set = True&amp;#10;    &amp;#10;if timer_set:&amp;#10;    if text_clock.getTime()&lt;0:&amp;#10;        pass&amp;#10;    else:&amp;#10;        continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((arrow_response.keys &amp;&amp; (! timer_set))) {&amp;#10;    if (_pj.in_es6(&quot;right&quot;, arrow_response.keys)) {&amp;#10;        press_key_r.height = 0.08;&amp;#10;        press_key_r.pos = [0, (- 0.29)];&amp;#10;    }&amp;#10;    if (_pj.in_es6(&quot;left&quot;, arrow_response.keys)) {&amp;#10;        press_key_l.height = 0.08;&amp;#10;        press_key_l.pos = [(- 0.12), (- 0.29)];&amp;#10;    }&amp;#10;    text_clock = new core.Clock();&amp;#10;    text_clock.add(1);&amp;#10;    timer_set = true;&amp;#10;}&amp;#10;if (timer_set) {&amp;#10;    if ((text_clock.getTime() &lt; 0)) {&amp;#10;    } else {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="text_clock.reset();&amp;#10;if (reihenfolge) {&amp;#10;    if ((trials_num.thisN &gt;= (trials_limit - 1))) {&amp;#10;        trials_num.finished = true;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((trials_num2.thisN &gt;= (trials_limit - 1))) {&amp;#10;        trials_num2.finished = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="text_clock.reset()&amp;#10;#if trials max is 20 end early &amp;#10;if reihenfolge:&amp;#10;    if trials_num.thisN &gt;= (trials_limit-1):&amp;#10;        trials_num.finished = True&amp;#10;else: &amp;#10;    if trials_num2.thisN &gt;= (trials_limit-1):&amp;#10;        trials_num2.finished = True&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="number_genertion" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="timer_line">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="white" valType="color"/>
        <Param name="lineWidth" updates="constant" val="10" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="timer_line" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.35)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="constant" val="(1,0.02)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <CodeComponent name="timer">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import time&amp;#10;#import sys&amp;#10;from psychopy import event" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as time from 'time';&amp;#10;import {event} from 'psychopy';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="t = 5;&amp;#10;timer_line.size = [1, 0.02];&amp;#10;width = timer_line.size[0];&amp;#10;dist = (width / (30 * t));&amp;#10;timer_line.autoDraw = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# configure visual timer&amp;#10;t = 5&amp;#10;&amp;#10;#timer = core.Clock()&amp;#10;#timer.add(t)&amp;#10;&amp;#10;#timer = core.CountdownTimer(t)&amp;#10;&amp;#10;# size of line&amp;#10;timer_line.size = [1,0.02]&amp;#10;width = timer_line.size[0]&amp;#10;&amp;#10;# how much the line shrinks each frame&amp;#10;dist = width/(30*t)&amp;#10;timer_line.autoDraw= False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#if timer.getTime() &gt; 0 and continueRoutine:&amp;#10;# adjust line size to visualize time&amp;#10;width -= dist&amp;#10;timer_line.size = [width,0.02]&amp;#10;timer_line.draw()&amp;#10;win.flip()&amp;#10;        &amp;#10;# check if response was given &amp;#10;&quot;&quot;&quot;&amp;#10;    keys = event.getKeys()&amp;#10;    if keys: &amp;#10;        if 'right' in keys: &amp;#10;            rt = arrow_response.rt&amp;#10;            print(rt)&amp;#10;            continueRoutine = False&amp;#10;        if 'left' in keys: &amp;#10;            rt = arrow_response.rt&amp;#10;            print(rt)&amp;#10;            continueRoutine = False&amp;#10;&quot;&quot;&quot;      &amp;#10;            &amp;#10;&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="width -= dist;&amp;#10;timer_line.size = [width, 0.02];&amp;#10;timer_line.draw();&amp;#10;win.flip();&amp;#10;/*&amp;#10;keys = event.getKeys()&amp;#10;if keys:&amp;#10;if 'right' in keys:&amp;#10;rt = arrow_response.rt&amp;#10;print(rt)&amp;#10;continueRoutine = False&amp;#10;if 'left' in keys:&amp;#10;rt = arrow_response.rt&amp;#10;print(rt)&amp;#10;continueRoutine = False*/&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#rt = arrow_response.rt&amp;#10;#print(rt)&amp;#10;#event.clearEvents()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="timer" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="arrow_response">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="list"/>
        <Param name="correctAns" updates="constant" val="$corResp" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="arrow_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="eyecode_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# eyetracking, append baseline measures with new pupil diameter&amp;#10;if(global_gaze_data != None):&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    eye_measures.append(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    #time_stamps.append(dt.utcnow())&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    baseline_s.append('')&amp;#10;&amp;#10;    &amp;#10;    if arrow_response.keys:&amp;#10;        correct_s.append(arrow_response.corr)&amp;#10;        key_s.append(arrow_response.keys)&amp;#10;    else:&amp;#10;        correct_s.append('')&amp;#10;        key_s.append('')&amp;#10;            &amp;#10;    id_s.append(num)&amp;#10;    &amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((global_gaze_data !== null)) {&amp;#10;    eye_measures.append(global_gaze_data.get(&quot;left_pupil_diameter&quot;));&amp;#10;    baseline_s.append(&quot;&quot;);&amp;#10;    if (arrow_response.keys) {&amp;#10;        correct_s.append(arrow_response.corr);&amp;#10;        key_s.append(arrow_response.keys);&amp;#10;    } else {&amp;#10;        correct_s.append(&quot;&quot;);&amp;#10;        key_s.append(&quot;&quot;);&amp;#10;    }&amp;#10;    id_s.append(num);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="eyecode_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Instructions">
      <TextComponent name="instructions_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="num"/>
        <Param name="name" updates="None" val="instructions_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In the following, you will be asked if the number in the middle is greater than 10.&amp;#10;&amp;#10;Please always lie!&amp;#10;&amp;#10;Press 'space' to start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="instructions_space">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instructions_space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="instructions_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# here you can change the order in &amp;#10;# which they should lie, tell truth or choose&amp;#10;&amp;#10;# lie = 0, truth = 1, choorse = 2&amp;#10;&amp;#10;order = [2, 1, 0]&amp;#10;&amp;#10;# generates list with len 20, 10 ints &lt; 10, 10 ints &gt; 10&amp;#10;def gen_rand_list():&amp;#10;    # list len 10, random num from 11 to 19&amp;#10;    randomlist_1 = random.sample(range(11, 19), 5)&amp;#10;    randomlist_1.extend(random.sample(range(11, 19), 5))&amp;#10;    #list len 10, random num from 1 to 9&amp;#10;    randomlist_2 = random.sample(range(1, 9), 5)&amp;#10;    randomlist_2.extend(random.sample(range(1, 9), 5))&amp;#10;    &amp;#10;    randomlist_1.extend(randomlist_2)&amp;#10;    return randomlist_1" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="order = [2, 1, 0];&amp;#10;function gen_rand_list() {&amp;#10;    var randomlist_1, randomlist_2;&amp;#10;    randomlist_1 = random.sample(util.range(11, 19), 5);&amp;#10;    randomlist_1.extend(random.sample(util.range(11, 19), 5));&amp;#10;    randomlist_2 = random.sample(util.range(1, 9), 5);&amp;#10;    randomlist_2.extend(random.sample(util.range(1, 9), 5));&amp;#10;    randomlist_1.extend(randomlist_2);&amp;#10;    return randomlist_1;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="numbers_rand = [];&amp;#10;trials_limit = 20;&amp;#10;option = &quot;number&quot;;&amp;#10;number_r = 0;&amp;#10;if (reihenfolge) {&amp;#10;    number_r = trials_instruct_num.thisN;&amp;#10;} else {&amp;#10;    number_r = trials_instruct_num2.thisN;&amp;#10;}&amp;#10;if ((order[number_r] === 0)) {&amp;#10;    instructions_text.text = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nPlease always lie! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;numbers.instructions&quot;, &quot;lie&quot;);&amp;#10;    mode = &quot;lie&quot;;&amp;#10;    numbers_rand = gen_rand_list();&amp;#10;}&amp;#10;if ((order[number_r] === 1)) {&amp;#10;    instructions_text.text = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nPlease always tell the truth! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;numbers.instructions&quot;, &quot;truth&quot;);&amp;#10;    numbers_rand = gen_rand_list();&amp;#10;    mode = &quot;truth&quot;;&amp;#10;}&amp;#10;if ((order[number_r] === 2)) {&amp;#10;    instructions_text.text = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nYou can choose to lie or tell the truth! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;numbers.instructions&quot;, &quot;choice&quot;);&amp;#10;    numbers_rand = gen_rand_list();&amp;#10;    numbers_rand.extend(gen_rand_list());&amp;#10;    trials_limit = 40;&amp;#10;    mode = &quot;choice&quot;;&amp;#10;}&amp;#10;random.shuffle(numbers_rand);&amp;#10;console.log(numbers_rand);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# depending on the oder decided in the beginning&amp;#10;# edit the displayed text and write to output file&amp;#10;numbers_rand =[]&amp;#10;trials_limit = 20&amp;#10;option = 'number'&amp;#10;number_r = 0&amp;#10;if reihenfolge:&amp;#10;    number_r = trials_instruct_num.thisN&amp;#10;else:&amp;#10;    number_r = trials_instruct_num2.thisN&amp;#10;&amp;#10;if order[number_r] == 0:&amp;#10;    instructions_text.text  = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nPlease always lie! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('numbers.instructions', 'lie')&amp;#10;    mode = 'lie'&amp;#10;    numbers_rand = gen_rand_list()&amp;#10;if order[number_r] == 1:&amp;#10;    instructions_text.text  = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nPlease always tell the truth! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('numbers.instructions', 'truth')&amp;#10;    numbers_rand = gen_rand_list()&amp;#10;    mode = 'truth'&amp;#10;if order[number_r] == 2:&amp;#10;    instructions_text.text  = &quot;In the following, you will be asked if the number in the middle is greater than 10.\n \nYou can choose to lie or tell the truth! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('numbers.instructions', 'choice')&amp;#10;    numbers_rand = gen_rand_list()&amp;#10;    numbers_rand. extend(gen_rand_list())&amp;#10;    trials_limit = 40&amp;#10;    mode = 'choice'&amp;#10;&amp;#10;# randomize numbers&amp;#10;random.shuffle(numbers_rand)&amp;#10;print(numbers_rand)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="instructions_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="eyecode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="baseline_s = [];&amp;#10;eye_measures = [];&amp;#10;key_s = [];&amp;#10;id_s = [];&amp;#10;correct_s = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# some datastorages&amp;#10;&amp;#10;baseline_s = []&amp;#10;eye_measures = []&amp;#10;key_s = []&amp;#10;id_s = []&amp;#10;correct_s = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="eyecode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Instructions_Quest">
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instructions_text2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="num"/>
        <Param name="name" updates="None" val="instructions_text2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <CodeComponent name="code_quest">
        <Param name="Before Experiment" updates="constant" val="import csv&amp;#10;# function to read in csv files&amp;#10;def read_csv(filename, delim):&amp;#10;    questions = []&amp;#10;    with open(filename) as csv_file:&amp;#10;        csv_reader = csv.reader(csv_file, delimiter=delim)&amp;#10;        line_count = 0&amp;#10;        for row in csv_reader:&amp;#10;            if line_count == 0:&amp;#10;                line_count += 1&amp;#10;            else:&amp;#10;                questions.append([int(row[0]),str(row[1])])&amp;#10;                line_count += 1&amp;#10;    return questions&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# here you can change the order in &amp;#10;# which they should lie, tell truth or choose&amp;#10;&amp;#10;# lie = 0, truth = 1, choice = 2&amp;#10;&amp;#10;order = [2, 1, 0]&amp;#10;&amp;#10;# read in the csv for questions and randomize order of questions&amp;#10;questions = []&amp;#10;&amp;#10;questions_emo = read_csv('Question_emotional.csv', ',')&amp;#10;questions_neu = read_csv('Question_neutral.csv', ';')&amp;#10;&amp;#10;# pick questions for lie and truth&amp;#10;#pick_emo = pick_quest()&amp;#10;#pick_neu = pick_quest()&amp;#10;# shuffle questions and then pick first 10 from each for lie &amp;#10;# and last 10 for truth&amp;#10;random.shuffle(questions_emo)&amp;#10;random.shuffle(questions_neu)&amp;#10;&amp;#10;questions_lie = questions_emo[0:10]&amp;#10;questions_lie.extend(questions_neu[0:10])&amp;#10;&amp;#10;questions_truth = questions_emo[10:20]&amp;#10;questions_truth.extend(questions_neu[10:20])&amp;#10;&amp;#10;questions_choice = questions_emo.copy()&amp;#10;questions_choice.extend(questions_neu[:])&amp;#10;&amp;#10;print('lie')&amp;#10;print(len(questions_lie))&amp;#10;print('truth')&amp;#10;print(len(questions_truth))&amp;#10;print('chioce')&amp;#10;print(len(questions_choice))" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="order = [2, 1, 0];&amp;#10;questions = [];&amp;#10;questions_emo = read_csv(&quot;Question_emotional.csv&quot;, &quot;,&quot;);&amp;#10;questions_neu = read_csv(&quot;Question_neutral.csv&quot;, &quot;;&quot;);&amp;#10;random.shuffle(questions_emo);&amp;#10;random.shuffle(questions_neu);&amp;#10;questions_lie = questions_emo.slice(0, 10);&amp;#10;questions_lie.extend(questions_neu.slice(0, 10));&amp;#10;questions_truth = questions_emo.slice(10, 20);&amp;#10;questions_truth.extend(questions_neu.slice(10, 20));&amp;#10;questions_choice = questions_emo.copy();&amp;#10;questions_choice.extend(questions_neu.slice(0));&amp;#10;console.log(&quot;lie&quot;);&amp;#10;console.log(questions_lie.length);&amp;#10;console.log(&quot;truth&quot;);&amp;#10;console.log(questions_truth.length);&amp;#10;console.log(&quot;chioce&quot;);&amp;#10;console.log(questions_choice.length);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="option = &quot;questions&quot;;&amp;#10;trials_limit = 20;&amp;#10;if ((order[trials_instruct_quest.thisN] === 0)) {&amp;#10;    instructions_text2.text = &quot;In the following, you will be asked personal questions.\n \nPlease always lie! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;questions.instructions&quot;, &quot;lie&quot;);&amp;#10;    questions = questions_lie.copy();&amp;#10;    mode = &quot;lie&quot;;&amp;#10;}&amp;#10;if ((order[trials_instruct_quest.thisN] === 1)) {&amp;#10;    instructions_text2.text = &quot;In the following, you will be asked personal questions.\n \nPlease always tell the truth! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;questions.instructions&quot;, &quot;truth&quot;);&amp;#10;    questions = questions_truth.copy();&amp;#10;    mode = &quot;truth&quot;;&amp;#10;}&amp;#10;if ((order[trials_instruct_quest.thisN] === 2)) {&amp;#10;    instructions_text2.text = &quot;In the following, you will be asked personal questions.\n \nYou can choose to lie or tell the truth! \n \nPress 'space' to start&quot;;&amp;#10;    psychoJS.experiment.addData(&quot;questions.instructions&quot;, &quot;choice&quot;);&amp;#10;    questions = questions_choice.copy();&amp;#10;    trials_limit = 40;&amp;#10;    mode = &quot;choice&quot;;&amp;#10;}&amp;#10;random.shuffle(questions);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# depending on the oder decided in the beginning&amp;#10;# edit the displayed text and write to output file&amp;#10;&amp;#10;option = 'questions'&amp;#10;trials_limit = 20&amp;#10;if order[trials_instruct_quest.thisN] == 0:&amp;#10;    instructions_text2.text  = &quot;In the following, you will be asked personal questions.\n \nPlease always lie! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('questions.instructions', 'lie')&amp;#10;    questions = questions_lie.copy()&amp;#10;    mode = 'lie'&amp;#10;if order[trials_instruct_quest.thisN] == 1:&amp;#10;    instructions_text2.text  = &quot;In the following, you will be asked personal questions.\n \nPlease always tell the truth! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('questions.instructions', 'truth')&amp;#10;    questions = questions_truth.copy()&amp;#10;    mode = 'truth'&amp;#10;if order[trials_instruct_quest.thisN] == 2:&amp;#10;    instructions_text2.text  = &quot;In the following, you will be asked personal questions.\n \nYou can choose to lie or tell the truth! \n \nPress 'space' to start&quot;&amp;#10;    thisExp.addData('questions.instructions', 'choice')&amp;#10;    questions = questions_choice.copy()&amp;#10;    trials_limit = 40&amp;#10;    mode = 'choice'&amp;#10;&amp;#10;random.shuffle(questions)&amp;#10;#print(questions)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_quest" valType="code"/>
      </CodeComponent>
      <CodeComponent name="eyecode_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="baseline_s = [];&amp;#10;eye_measures = [];&amp;#10;key_s = [];&amp;#10;id_s = [];&amp;#10;correct_s = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# some datastorages&amp;#10;&amp;#10;baseline_s = []&amp;#10;eye_measures = []&amp;#10;key_s = []&amp;#10;id_s = []&amp;#10;correct_s = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="eyecode_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="QuestionsTest">
      <TextComponent name="press_key_l2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="press_key_l2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(-0.12, -0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="15.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="&quot;←&quot; No" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="press_key_r2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="press_key_r2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="15.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="                    Yes &quot;→&quot; " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="question">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="num"/>
        <Param name="name" updates="None" val="question" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="15.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <CodeComponent name="select_question">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="num_quest = trials_quest.thisN;&amp;#10;question.text = questions[num_quest][1].toString();&amp;#10;thisExp.addData(&quot;question.id&quot;, questions[num_quest][0]);&amp;#10;press_key_l2.height = 0.05;&amp;#10;press_key_l2.pos = [(- 0.12), (- 0.3)];&amp;#10;press_key_r2.height = 0.05;&amp;#10;press_key_r2.pos = [0, (- 0.3)];&amp;#10;timer_set = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# get question to display on screen&amp;#10;num_quest = trials_quest.thisN&amp;#10;question.text = str(questions[num_quest][1])&amp;#10;&amp;#10;# write selected question to data&amp;#10;thisExp.addData('question.id', questions[num_quest][0])&amp;#10;&amp;#10;press_key_l2.height = 0.05&amp;#10;press_key_l2.pos = (-0.12, -0.3)&amp;#10;press_key_r2.height = 0.05&amp;#10;press_key_r2.pos = (0, -0.3)&amp;#10;&amp;#10;timer_set = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if question_response.keys and not timer_set:&amp;#10;    # right key&amp;#10;    if 'right' in question_response.keys:&amp;#10;        press_key_r2.height = 0.08&amp;#10;        press_key_r2.pos = (0, -0.29)&amp;#10;    # left key&amp;#10;    if 'left' in question_response.keys:&amp;#10;        press_key_l2.height = 0.08&amp;#10;        press_key_l2.pos = (-0.12, -0.29)&amp;#10;    # set timer&amp;#10;    text_clock = core.Clock()&amp;#10;    text_clock.add(1)&amp;#10;    timer_set = True&amp;#10;    &amp;#10;if timer_set:&amp;#10;    if text_clock.getTime()&lt;0:&amp;#10;        pass&amp;#10;    else:&amp;#10;        continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((question_response.keys &amp;&amp; (! timer_set))) {&amp;#10;    if (_pj.in_es6(&quot;right&quot;, question_response.keys)) {&amp;#10;        press_key_r2.height = 0.08;&amp;#10;        press_key_r2.pos = [0, (- 0.29)];&amp;#10;    }&amp;#10;    if (_pj.in_es6(&quot;left&quot;, question_response.keys)) {&amp;#10;        press_key_l2.height = 0.08;&amp;#10;        press_key_l2.pos = [(- 0.12), (- 0.29)];&amp;#10;    }&amp;#10;    text_clock = new core.Clock();&amp;#10;    text_clock.add(1);&amp;#10;    timer_set = true;&amp;#10;}&amp;#10;if (timer_set) {&amp;#10;    if ((text_clock.getTime() &lt; 0)) {&amp;#10;    } else {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="text_clock.reset();&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="text_clock.reset()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="select_question" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="question_response">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="question_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="15.0" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <PolygonComponent name="timer_line2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="white" valType="color"/>
        <Param name="lineWidth" updates="constant" val="10" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="timer_line2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.35)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="constant" val="(1,0.02)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="15.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <CodeComponent name="timer_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="continueRoutine = true;&amp;#10;time = 15;&amp;#10;timer_line2.size = [1, 0.02];&amp;#10;width = timer_line2.size[0];&amp;#10;dist = (width / (30 * time));&amp;#10;timer_line2.autoDraw = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="continueRoutine = True&amp;#10;# configure visual timer&amp;#10;time = 15&amp;#10;#timer = core.CountdownTimer(time)&amp;#10;&amp;#10;# size of line&amp;#10;timer_line2.size = [1,0.02]&amp;#10;width = timer_line2.size[0]&amp;#10;&amp;#10;# how much the line shrinks each frame&amp;#10;dist = width/(30*time)&amp;#10;timer_line2.autoDraw= False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#while timer.getTime() &gt; 0 and continueRoutine:&amp;#10;    # adjust line size to visualize time&amp;#10;width -= dist&amp;#10;timer_line2.size = [width,0.02]&amp;#10;timer_line2.draw()&amp;#10;    &amp;#10;&quot;&quot;&quot;&amp;#10;# check if response was given&amp;#10;keys = event.getKeys()&amp;#10;if keys: &amp;#10;    if 'right' in keys: &amp;#10;        continueRoutine = False&amp;#10;    if 'left' in keys: &amp;#10;        continueRoutine = False&amp;#10;&quot;&quot;&quot;        &amp;#10;win.flip()&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="width -= dist;&amp;#10;timer_line2.size = [width, 0.02];&amp;#10;timer_line2.draw();&amp;#10;/*&amp;#10;# check if response was given&amp;#10;keys = event.getKeys()&amp;#10;if keys:&amp;#10;if 'right' in keys:&amp;#10;continueRoutine = False&amp;#10;if 'left' in keys:&amp;#10;continueRoutine = False*/&amp;#10;psychoJS.window.flip();&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((trials_quest.thisN &gt;= (trials_limit - 1))) {&amp;#10;    trials_quest.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# check if question limit is reached&amp;#10;if trials_quest.thisN &gt;= (trials_limit-1):&amp;#10;    trials_quest.finished = True" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="timer_2" valType="code"/>
      </CodeComponent>
      <CodeComponent name="eyecode_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# eyetracking, append baseline measures with new pupil diameter&amp;#10;if(global_gaze_data != None):&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    eye_measures.append(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    #time_stamps.append(dt.utcnow())&amp;#10;    #print(global_gaze_data.get('left_pupil_diameter'))&amp;#10;    baseline_s.append('')&amp;#10;&amp;#10;    &amp;#10;    if question_response.keys:&amp;#10;        #correct_s.append(arrow_response.corr)&amp;#10;        correct_s.append('')&amp;#10;        key_s.append(question_response.keys)&amp;#10;    else:&amp;#10;        correct_s.append('')&amp;#10;        key_s.append('')&amp;#10;            &amp;#10;    id_s.append(questions[num_quest][0])&amp;#10;    &amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((global_gaze_data !== null)) {&amp;#10;    eye_measures.push(global_gaze_data.get(&quot;left_pupil_diameter&quot;));&amp;#10;    baseline_s.push(&quot;&quot;);&amp;#10;    if (question_response.keys) {&amp;#10;        correct_s.push(&quot;&quot;);&amp;#10;        key_s.push(question_response.keys);&amp;#10;    } else {&amp;#10;        correct_s.push(&quot;&quot;);&amp;#10;        key_s.push(&quot;&quot;);&amp;#10;    }&amp;#10;    id_s.push(questions[num_quest][0]);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="eyecode_4" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="end">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="end" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Thank you for participating!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <CodeComponent name="end_tracking_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="eye_tracker.unsubscribe_from(tr.EYETRACKER_GAZE_DATA, gaze_data_callback, {&quot;as_dictionary&quot;: true});&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# start eyetracking &amp;#10;eye_tracker.unsubscribe_from(tr.EYETRACKER_GAZE_DATA, gaze_data_callback, as_dictionary=True)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="end_tracking_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Save_Data">
      <CodeComponent name="save_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="import * as math from 'math';&amp;#10;var baseline_s, correct_s, eye_measures, i, id_s, key_s, row, workbook, ws;&amp;#10;workbook = new xl.Workbook(((((((((&quot;data/&quot; + user.toString()) + &quot;_LieDetection_&quot;) + exp_time) + &quot;_&quot;) + option) + &quot;_&quot;) + mode) + &quot;.xlsx&quot;));&amp;#10;ws = workbook.add_worksheet();&amp;#10;ws.write(&quot;A1&quot;, &quot;pupil_dilation&quot;);&amp;#10;ws.write(&quot;B1&quot;, &quot;baseline&quot;);&amp;#10;ws.write(&quot;C1&quot;, &quot;num/id&quot;);&amp;#10;ws.write(&quot;D1&quot;, &quot;key&quot;);&amp;#10;ws.write(&quot;E1&quot;, &quot;correct&quot;);&amp;#10;row = 1;&amp;#10;for (var sd, _pj_c = 0, _pj_a = eye_measures, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    sd = _pj_a[_pj_c];&amp;#10;    i = util.index(eye_measures, sd);&amp;#10;    if ((math.isnan(sd) === true)) {&amp;#10;        ws.write(row, 0, &quot;Nan&quot;);&amp;#10;    } else {&amp;#10;        ws.write(row, 0, sd);&amp;#10;    }&amp;#10;    ws.write(row, 1, baseline_s[i].toString());&amp;#10;    ws.write(row, 2, id_s[i].toString());&amp;#10;    ws.write(row, 3, key_s[i].toString());&amp;#10;    ws.write(row, 4, correct_s[i].toString());&amp;#10;    row += 1;&amp;#10;}&amp;#10;workbook.close();&amp;#10;eye_measures = [];&amp;#10;baseline_s = [];&amp;#10;eye_measures = [];&amp;#10;key_s = [];&amp;#10;id_s = [];&amp;#10;correct_s = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="import math&amp;#10;#save pupil data&amp;#10;&amp;#10;#stimuli_data = [s - bs_diameter if math.isnan(s) == False else s for s in stimuli_measures]&amp;#10;&amp;#10;workbook = xl.Workbook('data/' + str(user) + '_LieDetection_' + exp_time + '_' + option + '_' + mode  +'.xlsx')&amp;#10;ws = workbook.add_worksheet()&amp;#10;&amp;#10;ws.write('A1', 'pupil_dilation')&amp;#10;ws.write('B1', 'baseline')&amp;#10;ws.write('C1', 'num/id')&amp;#10;ws.write('D1', 'key')&amp;#10;ws.write('E1', 'correct')&amp;#10;&amp;#10;&amp;#10;row = 1&amp;#10;for sd in eye_measures:&amp;#10;    i = eye_measures.index(sd)&amp;#10;    #time = time_stamps[eye_measures.index(sd)]&amp;#10;    if math.isnan(sd) == True :&amp;#10;        ws.write(row, 0, 'Nan')&amp;#10;    else:&amp;#10;        ws.write(row, 0, sd)&amp;#10;    ws.write(row, 1, str(baseline_s[i]))&amp;#10;    ws.write(row, 2, str(id_s[i]))&amp;#10;    ws.write(row, 3, str(key_s[i]))&amp;#10;    ws.write(row, 4, str(correct_s[i]))&amp;#10;    row += 1&amp;#10;    &amp;#10;workbook.close()&amp;#10;&amp;#10;# reset eye data for next cond&amp;#10;eye_measures = []&amp;#10;baseline_s = []&amp;#10;eye_measures = []&amp;#10;key_s= []&amp;#10;id_s = []&amp;#10;correct_s = []&amp;#10;&amp;#10;#print(expInfo['arrow_response.keys'])" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="save_code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Start"/>
    <LoopInitiator loopType="TrialHandler" name="trials_instruct_num">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="0" valType="num"/>
      <Param name="name" updates="None" val="trials_instruct_num" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials_num">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="num"/>
      <Param name="name" updates="None" val="trials_num" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Baseline"/>
    <Routine name="NumberTest"/>
    <LoopTerminator name="trials_num"/>
    <Routine name="Save_Data"/>
    <LoopTerminator name="trials_instruct_num"/>
    <LoopInitiator loopType="TrialHandler" name="trials_instruct_quest">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="num"/>
      <Param name="name" updates="None" val="trials_instruct_quest" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instructions_Quest"/>
    <LoopInitiator loopType="TrialHandler" name="trials_quest">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="num"/>
      <Param name="name" updates="None" val="trials_quest" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Baseline"/>
    <Routine name="QuestionsTest"/>
    <LoopTerminator name="trials_quest"/>
    <Routine name="Save_Data"/>
    <LoopTerminator name="trials_instruct_quest"/>
    <LoopInitiator loopType="TrialHandler" name="trials_instruct_num2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials_instruct_num2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials_num2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="num"/>
      <Param name="name" updates="None" val="trials_num2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Baseline"/>
    <Routine name="NumberTest"/>
    <LoopTerminator name="trials_num2"/>
    <Routine name="Save_Data"/>
    <LoopTerminator name="trials_instruct_num2"/>
    <Routine name="End"/>
  </Flow>
</PsychoPy2experiment>
